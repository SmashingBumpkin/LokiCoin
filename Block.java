import java.util.Date;

public class Block {
    private String hash = "initial"; //the hash generated by this block
    private String previousHash; //hash from last block
    private String data; //All of the transactions and stuff being written to the blockchain
    private long timeStamp; //time the block is mined
    private int nonce; //used to randomize the block hash
    private String rewardRecipient; //The miner who gets the block reward 
                                    //(the prize for being the successfull miner)
    // private static int longestChain = 0; //Needs removing
    private int blockNumber; //must be one greater than the previous block
    private static final int blockReward = 100;

    public Block(String data, String previousHash, String rewardRecipient, int previousBlockHeight) {
        this.data = data;
        this.previousHash = previousHash;
        this.timeStamp = new Date().getTime();
        this.blockNumber = previousBlockHeight + 1;
        this.rewardRecipient = rewardRecipient;
    }

    //Getters
    public String getHash() { return this.hash;}
    public String getPreviousHash() {return this.previousHash;}
    public String getData() {return this.data;}
    public long getTimeStamp(){return this.timeStamp;}
    public int getNonce(){return this.nonce;}
    public int getBlockNumber(){return this.blockNumber;}
    public String getRewardRecipient(){return this.rewardRecipient;}
    //Probably should add setters as well.
    public void setNonce(int nonce) { this.nonce = nonce; }
    public void setHash(String hash) { this.hash = hash; } 
    public void setTimeStamp(long timeStamp){ this.timeStamp = timeStamp;}

    public String returnBlockPrintable(){ //I'm pretty sure this should be a function like //def __repr__ in python
        String output = "__________\nBLOCK " + this.blockNumber + "\n\n"
                         + this.data + "\n\n" + "Hash:\n" + this.hash + "\n__________";
        return output;
    }

    public String returnBlockAsStringForHashing(){ //Turns the block into a string that can be hashed
        String output = this.getPreviousHash() + " " 
        + Long.toString(this.getTimeStamp()) + " "
        + Integer.toString(this.getNonce()) + " "
        + this.getData() + " "
        + this.getRewardRecipient() + " ";
        return output;
    }

    public void exportBlock(){
        //TODO: Elena
        //Export the current block
    }

    public void importBlock(){
        //TODO: Elena
        //Import the current block
        //Should extract the data and call the "Block(.." constructor
    }
}